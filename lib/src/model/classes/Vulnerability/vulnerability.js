/*----------------------------------------------------------------------------
*
*     Copyright Â© YYYY THALES. All Rights Reserved.
 *
* -----------------------------------------------------------------------------
* THALES MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF
* THE SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
 * TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE, OR NON-INFRINGEMENT. THALES SHALL NOT BE
 * LIABLE FOR ANY DAMAGES SUFFERED BY LICENSEE AS A RESULT OF USING,
 * MODIFYING OR DISTRIBUTING THIS SOFTWARE OR ITS DERIVATIVES.
*
* THIS SOFTWARE IS NOT DESIGNED OR INTENDED FOR USE OR RESALE AS ON-LINE
* CONTROL EQUIPMENT IN HAZARDOUS ENVIRONMENTS REQUIRING FAIL-SAFE
* PERFORMANCE, SUCH AS IN THE OPERATION OF NUCLEAR FACILITIES, AIRCRAFT
* NAVIGATION OR COMMUNICATION SYSTEMS, AIR TRAFFIC CONTROL, DIRECT LIFE
* SUPPORT MACHINES, OR WEAPONS SYSTEMS, IN WHICH THE FAILURE OF THE
* SOFTWARE COULD LEAD DIRECTLY TO DEATH, PERSONAL INJURY, OR SEVERE
* PHYSICAL OR ENVIRONMENTAL DAMAGE ("HIGH RISK ACTIVITIES"). THALES
* SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTY OF FITNESS FOR
* HIGH RISK ACTIVITIES.
* -----------------------------------------------------------------------------
*/
const { isProjectName, isProjectVersion } = require('../ISRAProject/validation');
const { isSupportingAssetId } = require('../SupportingAsset/validation');
const {
  isVulnerabilityId,
  isVulnerabilityName,
  isVulnerabilityFamily,
  isVulnerabilityTrackingId,
  isVulnerabilityTrackingURI,
  isVulnerabilityDescription,
  isVulnerabilityDescriptionAttachment,
  isVulnerabilityCVE,
  isCVEScore,
  isOverallScore,
  isOverallLevel,
} = require('./validation');
const DecodeAttachment = require('../../superclass/index');

const vulnerabilitySchema = require('../../schema/json-schema').properties.Vulnerability.items.properties;

/**
  * Create a Vulnerability with private members
  * @throws Vulnerability asset id vulnerabilityId is not null/integer
  * @throws Project name ref is not a string
  * @throws Project version ref is not a string
  * @throws Vulnerability (vulnerabilityId): name is not a string
  * @throws Vulnerability (vulnerabilityId): family is invalid string
  * @throws Vulnerability (vulnerabilityId): tracking id is not a string
  * @throws Vulnerability (vulnerabilityId): tracking URL is invalid string
  * @throws Vulnerability (vulnerabilityId): description is not a html string
  * @throws Vulnerability (vulnerabilityId): description attachment is not a base64 string
  * @throws Vulnerability (vulnerabilityId): vulnerability cve is invalid string
  * @throws Vulnerability (vulnerabilityId): cve score is invalid null/double
  * @throws Vulnerability (vulnerabilityId): overall score is not an invalid null/integer
  * @throws Vulnerability (vulnerabilityId): overall level is invalid
  * @throws Vulnerability (vulnerabilityId):
  * supporting asset ref (supportingAssetId) is invalid null/integer
  * @throws Vulnerability (vulnerabilityId): supporting asset ref doesn't exist
  * @throws Vulnerability (vulnerabilityId): useNewDecode is not a boolean
*/
class Vulnerability extends DecodeAttachment {
  // value of latest vulnerabilityId
  static #idCount;

  #vulnerabilityId;

  #projectNameRef;

  #projectVersionRef;

  #vulnerabilityName;

  #vulnerabilityFamily;

  #vulnerabilityTrackingID;

  #vulnerabilityTrackingURI;

  #vulnerabilityDescription;

  #vulnerabilityDescriptionAttachment;

  #vulnerabilityCVE;

  #cveScore;

  #overallScore;

  #overallLevel;

  // id references of selected supportingAsset
  #supportingAssetRef;

  constructor() {
    super();
    this.#vulnerabilityId = Vulnerability.incrementId();
    this.#vulnerabilityName = vulnerabilitySchema.vulnerabilityName.default;
    this.#vulnerabilityFamily = vulnerabilitySchema.vulnerabilityFamily.default;
    this.#vulnerabilityTrackingID = vulnerabilitySchema.vulnerabilityTrackingID.default;
    this.#vulnerabilityTrackingURI = vulnerabilitySchema.vulnerabilityTrackingURI.default;
    this.#vulnerabilityDescription = vulnerabilitySchema.vulnerabilityDescription.default;
    this.#vulnerabilityDescriptionAttachment = vulnerabilitySchema
      .vulnerabilityDescriptionAttachment.default;
    this.#vulnerabilityCVE = vulnerabilitySchema.vulnerabilityCVE.default;
    this.#cveScore = vulnerabilitySchema.cveScore.default;
    this.#overallScore = vulnerabilitySchema.overallScore.default;
    this.#overallLevel = vulnerabilitySchema.overallLevel.default;
    this.#supportingAssetRef = new Set();
  }

  /** value of id of vulnerability
    * @type {integer|null}
  */
  set vulnerabilityId(vulnerabilityId) {
    if (isVulnerabilityId(vulnerabilityId)) {
      this.#vulnerabilityId = vulnerabilityId;
    } else throw new Error(`Vulnerability asset id ${vulnerabilityId} is not null/integer`);
  }

  get vulnerabilityId() {
    return this.#vulnerabilityId;
  }

  /** referenced value of projectName from ISRAMetaProject
    * @type {string}
  */
  set projectNameRef(projectname) {
    if (isProjectName(projectname)) this.#projectNameRef = projectname;
    else throw new Error('Project name ref is not a string');
  }

  get projectNameRef() {
    return this.#projectNameRef;
  }

  /**  referenced value of projectVersion from ISRAMetaProject
    * @type {string}
  */
  set projectVersionRef(projectVersion) {
    if (isProjectVersion(projectVersion)) this.#projectVersionRef = projectVersion;
    else throw new Error('Project version ref is not a string');
  }

  get projectVersionRef() {
    return this.#projectVersionRef;
  }

  /**  text input of name of vulnerability
    * @type {string}
  */
  set vulnerabilityName(vulnerabilityName) {
    if (isVulnerabilityName(vulnerabilityName)) this.#vulnerabilityName = vulnerabilityName;
    else throw new Error(`Vulnerability ${this.#vulnerabilityId}: name is not a string`);
  }

  get vulnerabilityName() {
    return this.#vulnerabilityName;
  }

  /**  value of vulnerability family selected
    * @type {string}
  */
  set vulnerabilityFamily(vulnerabilityFamily) {
    if (isVulnerabilityFamily(vulnerabilityFamily)) this.#vulnerabilityFamily = vulnerabilityFamily;
    else throw new Error(`Vulnerability ${this.#vulnerabilityId}: family is invalid string`);
  }

  get vulnerabilityFamily() {
    return this.#vulnerabilityFamily;
  }

  /** text input of GTO defect id
    * @type {string}
  */
  set vulnerabilityTrackingID(vulnerabilityTrackingID) {
    if (isVulnerabilityTrackingId(vulnerabilityTrackingID)) {
      this.#vulnerabilityTrackingID = vulnerabilityTrackingID;
    } else throw new Error(`Vulnerability ${this.#vulnerabilityId}: tracking id is not a string`);
  }

  get vulnerabilityTrackingID() {
    return this.#vulnerabilityTrackingID;
  }

  /** inserted value of hyperlink of GTO defect url
    * @type {string}
  */
  set vulnerabilityTrackingURI(vulnerabilityTrackingURI) {
    if (isVulnerabilityTrackingURI(vulnerabilityTrackingURI)) {
      this.#vulnerabilityTrackingURI = vulnerabilityTrackingURI;
    } else {
      throw new Error(`Vulnerability ${this.#vulnerabilityId}: tracking URL is invalid string`);
    }
  }

  get vulnerabilityTrackingURI() {
    return this.#vulnerabilityTrackingURI;
  }

  /** text input of description of vulnerability
    * @type {string}
  */
  set vulnerabilityDescription(vulnerabilityDescription) {
    if (isVulnerabilityDescription(vulnerabilityDescription)) {
      this.#vulnerabilityDescription = vulnerabilityDescription;
    } else throw new Error(`Vulnerability ${this.#vulnerabilityId}: description is not a html string`);
  }

  get vulnerabilityDescription() {
    return this.#vulnerabilityDescription;
  }

  /** value of attachment of a vulnerability descriptive document file
    * @type {string}
  */
  set vulnerabilityDescriptionAttachment(vulnerabilityDescriptionAttachment) {
    if (isVulnerabilityDescriptionAttachment(vulnerabilityDescriptionAttachment)) {
      this.#vulnerabilityDescriptionAttachment = vulnerabilityDescriptionAttachment;
    } else {
      throw new Error(`Vulnerability ${this.#vulnerabilityId}: description attachment is not a base64 string`);
    }
  }

  get vulnerabilityDescriptionAttachment() {
    return this.#vulnerabilityDescriptionAttachment;
  }

  /** vector string for CVSSV2/CVSSV3
    * @type {string}
  */
  set vulnerabilityCVE(vulnerabilityCVE) {
    if (isVulnerabilityCVE(vulnerabilityCVE)) this.#vulnerabilityCVE = vulnerabilityCVE;
    else throw new Error(`Vulnerability ${this.#vulnerabilityId}: vulnerability cve is invalid string`);
  }

  get vulnerabilityCVE() {
    return this.#vulnerabilityCVE;
  }

  /** input of calculated cvssv2/v3 score
    * @type {number|null}
  */
  set cveScore(cveScore) {
    if (isCVEScore(cveScore)) this.#cveScore = cveScore;
    else throw new Error(`Vulnerability ${this.#vulnerabilityId}: cve score is invalid null/double`);
  }

  get cveScore() {
    return this.#cveScore;
  }

  /** calculated value of vulnerability scoring
    * @type {integer|null}
  */
  set overallScore(overallScore) {
    if (isOverallScore(overallScore)) this.#overallScore = overallScore;
    else throw new Error(`Vulnerability ${this.#vulnerabilityId}: overall score is not an invalid null/integer`);
  }

  get overallScore() {
    return this.#overallScore;
  }

  /**  value of vulnerability level
    * @type {string}
  */
  set overallLevel(overallLevel) {
    if (isOverallLevel(overallLevel)) this.#overallLevel = overallLevel;
    else throw new Error(`Vulnerability ${this.#vulnerabilityId}: overall level is invalid`);
  }

  get overallLevel() {
    return this.#overallLevel;
  }

  /**
    * add supportingAssetId to map
    * @param {integer|null} supportingAssetId - id of selected SupportingAsset
  */
  addSupportingAssetRef(supportingAssetId) {
    if (isSupportingAssetId(supportingAssetId)) {
      this.#supportingAssetRef.add(supportingAssetId);
    } else throw new Error(`Vulnerability ${this.#vulnerabilityId}: supporting asset ref ${supportingAssetId} is invalid null/integer`);
  }

  /**
    * delete supportingAssetId from map
    * @param {integer|null} supportingAssetId - id of selected SupportingAsset
  */
  deleteSupportingAssetRef(supportingAssetId) {
    if (this.#supportingAssetRef.has(supportingAssetId)) {
      this.#supportingAssetRef.delete(supportingAssetId);
    } else throw new Error(`Vulnerability ${this.#vulnerabilityId}: supporting asset ref doesn't exist`);
  }

  // auto-increments static idCount to update vulnerabilityId
  static incrementId() {
    if (!this.#idCount) this.#idCount = 1;
    else this.#idCount += 1;
    return this.#idCount;
  }

  /**
    * @property {function} setIdCount - set latest id
    * @param {integer|null} latestId - riskId
  */
  static setIdCount(latestId) {
    this.#idCount = latestId;
  }

  /** get object of each value of Vulnerability member property
    * @type {object}
  */
  get properties() {
    return {
      projectNameRef: this.#projectNameRef,
      projectVersionRef: this.#projectVersionRef,
      vulnerabilityId: this.#vulnerabilityId,
      vulnerabilityName: this.#vulnerabilityName,
      vulnerabilityFamily: this.#vulnerabilityFamily,
      vulnerabilityTrackingID: this.#vulnerabilityTrackingID,
      vulnerabilityTrackingURI: this.#vulnerabilityTrackingURI,
      vulnerabilityDescription: this.#vulnerabilityDescription,
      vulnerabilityDescriptionAttachment: this.#vulnerabilityDescriptionAttachment,
      vulnerabilityCVE: this.#vulnerabilityCVE,
      cveScore: this.#cveScore,
      overallScore: this.#overallScore,
      overallLevel: this.#overallLevel,
      supportingAssetRef: Array.from(this.#supportingAssetRef),
      useNewDecode: super.useNewDecode
    };
  }
}

module.exports = Vulnerability;
