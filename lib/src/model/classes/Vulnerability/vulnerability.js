/*----------------------------------------------------------------------------
*
*     Copyright Â© YYYY THALES. All Rights Reserved.
 *
* -----------------------------------------------------------------------------
* THALES MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF
* THE SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
 * TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE, OR NON-INFRINGEMENT. THALES SHALL NOT BE
 * LIABLE FOR ANY DAMAGES SUFFERED BY LICENSEE AS A RESULT OF USING,
 * MODIFYING OR DISTRIBUTING THIS SOFTWARE OR ITS DERIVATIVES.
*
* THIS SOFTWARE IS NOT DESIGNED OR INTENDED FOR USE OR RESALE AS ON-LINE
* CONTROL EQUIPMENT IN HAZARDOUS ENVIRONMENTS REQUIRING FAIL-SAFE
* PERFORMANCE, SUCH AS IN THE OPERATION OF NUCLEAR FACILITIES, AIRCRAFT
* NAVIGATION OR COMMUNICATION SYSTEMS, AIR TRAFFIC CONTROL, DIRECT LIFE
* SUPPORT MACHINES, OR WEAPONS SYSTEMS, IN WHICH THE FAILURE OF THE
* SOFTWARE COULD LEAD DIRECTLY TO DEATH, PERSONAL INJURY, OR SEVERE
* PHYSICAL OR ENVIRONMENTAL DAMAGE ("HIGH RISK ACTIVITIES"). THALES
* SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTY OF FITNESS FOR
* HIGH RISK ACTIVITIES.
* -----------------------------------------------------------------------------
*/

const { isVulnerabilityFamily, isOverallLevelEnum } = require('./validation');
const {
  isVector, isValidHtml, isValidAttachment, isValidURL, isValidId,
} = require('../../schema/validation-pattern/validation');

// contains information about each vulnerability
module.exports = class Vulnerability {
  // value of latest vulnerabilityId
  static #idCount;

  // referenced value of projectName from ISRAMetaProject
  #projectNameRef;

  // referenced value of projectVersion from ISRAMetaProject
  #projectVersionRef;

  // value of id of vulnerability
  #vulnerabilityId;

  // text input of name of vulnerability
  #vulnerabilityName;

  // value of vulnerability family selected
  #vulnerabilityFamily;

  // text input of GTO defect id
  #vulnerabilityTrackingID;

  // inserted value of hyperlink of GTO defect url
  #vulnerabilityTrackingURI;

  // text input of description of vulnerability
  #vulnerabilityDescription;

  // value of attachment of a vulnerability descriptive document file
  #vulnerabilityDescriptionAttachment;

  // vector string for CVSSV2/CVSSV3
  #vulnerabilityCVE;

  // text input of calculated cvssv2/v3 score
  #cveScore;

  // calculated value of vulnerability scoring
  #overallScore;

  // calculated value of vulnerability level
  #overallLevel;

  // id references of selected supportingAsset
  #supportingAssetRef = new Set();

  constructor() {
    this.#vulnerabilityId = Vulnerability.incrementId();
  }

  set vulnerabilityId(vulnerabilityId) {
    if (isValidId(vulnerabilityId)) {
      this.#vulnerabilityId = vulnerabilityId;
    } else throw new Error(`Vulnerability asset id ${vulnerabilityId} is not null/integer`);
  }

  set projectNameRef(projectname) {
    if (typeof projectname === 'string') this.#projectNameRef = projectname;
    else throw new Error('Project name is not a string');
  }

  set projectVersionRef(projectVersion) {
    if (typeof projectVersion === 'string') this.#projectVersionRef = projectVersion;
    else throw new Error('Project version is not a string');
  }

  set vulnerabilityName(vulnerabilityName) {
    if (typeof vulnerabilityName === 'string') this.#vulnerabilityName = vulnerabilityName;
    else throw new Error(`Vulnerability ${this.#vulnerabilityId}: name is not a string`);
  }

  set vulnerabilityFamily(vulnerabilityFamily) {
    if (isVulnerabilityFamily(vulnerabilityFamily)) this.#vulnerabilityFamily = vulnerabilityFamily;
    else throw new Error(`Vulnerability ${this.#vulnerabilityId}: family is not a string`);
  }

  set vulnerabilityTrackingID(vulnerabilityTrackingID) {
    if (typeof vulnerabilityTrackingID === 'string') this.#vulnerabilityTrackingID = vulnerabilityTrackingID;
    else throw new Error(`Vulnerability ${this.#vulnerabilityId}: tracking id is not a string`);
  }

  set vulnerabilityTrackingURI(vulnerabilityTrackingURI) {
    if (isValidURL(vulnerabilityTrackingURI)) {
      this.#vulnerabilityTrackingURI = vulnerabilityTrackingURI;
    } else {
      throw new Error(`Vulnerability ${this.#vulnerabilityId}: tracking URL is invalid string`);
    }
  }

  set vulnerabilityDescription(vulnerabilityDescription) {
    if (isValidHtml(vulnerabilityDescription)) {
      this.#vulnerabilityDescription = vulnerabilityDescription;
    } else throw new Error(`Vulnerability ${this.#vulnerabilityId}: description is not a html string`);
  }

  set vulnerabilityDescriptionAttachment(vulnerabilityDescriptionAttachment) {
    if (isValidAttachment(vulnerabilityDescriptionAttachment)) {
      this.#vulnerabilityDescriptionAttachment = vulnerabilityDescriptionAttachment;
    } else {
      throw new Error(`Vulnerability ${this.#vulnerabilityId}: description attachment is not a base64 string`);
    }
  }

  set vulnerabilityCVE(vulnerabilityCVE) {
    if (isVector(vulnerabilityCVE)) this.#vulnerabilityCVE = vulnerabilityCVE;
    else throw new Error(`Vulnerability ${this.#vulnerabilityId}: vulnerability cve is invalid string`);
  }

  set cveScore(cveScore) {
    if ((!Number.isNaN(cveScore)
    && typeof cveScore === 'number'
    && cveScore >= 0
    && cveScore <= 10)
    || cveScore === null) this.#cveScore = cveScore;
    else throw new Error(`Vulnerability ${this.#vulnerabilityId}: cve score is not null/double`);
  }

  set overallScore(overallScore) {
    if ((Number.isSafeInteger(overallScore)
    && overallScore >= 0
    && overallScore <= 10)
    || overallScore === null) {
      this.#overallScore = overallScore;
    } else throw new Error(`Vulnerability ${this.#vulnerabilityId}: overall score is not an invalid null/integer`);
  }

  set overallLevel(overallLevel) {
    if (isOverallLevelEnum(overallLevel)) this.#overallLevel = overallLevel;
    else throw new Error(`Vulnerability ${this.#vulnerabilityId}: overall level doesn't exist`);
  }

  addSupportingAssetRef(supportingAssetId) {
    if (isValidId(supportingAssetId)) {
      this.#supportingAssetRef.add(supportingAssetId);
    } else throw new Error(`Vulnerability ${this.#vulnerabilityId}: supporting asset ref is not null/integer`);
  }

  deleteSupportingAssetRef(supportingAssetId) {
    if (this.#supportingAssetRef.has(supportingAssetId)) {
      this.#supportingAssetRef.delete(supportingAssetId);
    } else throw new Error(`Vulnerability ${this.#vulnerabilityId}: supporting asset ref doesn't exist`);
  }

  // auto-increments static idCount to update vulnerabilityId
  static incrementId() {
    if (!this.#idCount) this.#idCount = 1;
    else this.#idCount += 1;
    return this.#idCount;
  }

  // set latest id
  static setIdCount(latestId) {
    this.#idCount = latestId;
  }

  // get obj of relevant properties for storage
  get properties() {
    return {
      projectNameRef: this.#projectNameRef,
      projectVersionRef: this.#projectVersionRef,
      vulnerabilityId: this.#vulnerabilityId,
      vulnerabilityName: this.#vulnerabilityName,
      vulnerabilityFamily: this.#vulnerabilityFamily,
      vulnerabilityTrackingID: this.#vulnerabilityTrackingID,
      vulnerabilityTrackingURI: this.#vulnerabilityTrackingURI,
      vulnerabilityDescription: this.#vulnerabilityDescription,
      vulnerabilityDescriptionAttachment: this.#vulnerabilityDescriptionAttachment,
      vulnerabilityCVE: this.#vulnerabilityCVE,
      cveScore: this.#cveScore,
      overallScore: this.#overallScore,
      overallLevel: this.#overallLevel,
      supportingAssetRef: Array.from(this.#supportingAssetRef),
    };
  }
};
