/*----------------------------------------------------------------------------
*
*     Copyright Â© 2022 THALES. All Rights Reserved.
 *
* -----------------------------------------------------------------------------
* THALES MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF
* THE SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
 * TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE, OR NON-INFRINGEMENT. THALES SHALL NOT BE
 * LIABLE FOR ANY DAMAGES SUFFERED BY LICENSEE AS A RESULT OF USING,
 * MODIFYING OR DISTRIBUTING THIS SOFTWARE OR ITS DERIVATIVES.
*
* THIS SOFTWARE IS NOT DESIGNED OR INTENDED FOR USE OR RESALE AS ON-LINE
* CONTROL EQUIPMENT IN HAZARDOUS ENVIRONMENTS REQUIRING FAIL-SAFE
* PERFORMANCE, SUCH AS IN THE OPERATION OF NUCLEAR FACILITIES, AIRCRAFT
* NAVIGATION OR COMMUNICATION SYSTEMS, AIR TRAFFIC CONTROL, DIRECT LIFE
* SUPPORT MACHINES, OR WEAPONS SYSTEMS, IN WHICH THE FAILURE OF THE
* SOFTWARE COULD LEAD DIRECTLY TO DEATH, PERSONAL INJURY, OR SEVERE
* PHYSICAL OR ENVIRONMENTAL DAMAGE ("HIGH RISK ACTIVITIES"). THALES
* SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTY OF FITNESS FOR
* HIGH RISK ACTIVITIES.
* -----------------------------------------------------------------------------
*/

const jsonSchemaVulnerability = require('../../schema/json-schema').properties.Vulnerability.items.properties;
const validateClassProperties = require('../validation/validate-class-properties');

/** validate vulnerability id in Vulnerability
    * @param {integer|null} val value intended to be populated into
    * vulnerabilityId class property
    * @returns {boolean}
  */
const isVulnerabilityId = (val) => {
  const subSchema = jsonSchemaVulnerability.vulnerabilityId;
  return validateClassProperties(val, subSchema);
};

/** validate vulnerability name in Vulnerability
    * @param {string} val value intended to be populated into
    * vulnerabilityName class property
    * @returns {boolean}
  */
const isVulnerabilityName = (val) => {
  const subSchema = jsonSchemaVulnerability.vulnerabilityName;
  return validateClassProperties(val, subSchema);
};

/** validate vulnerability family in Vulnerability
    * @param {string} val value intended to be populated into
    * vulnerabilityFamily class property
    * @returns {boolean}
  */
const isVulnerabilityFamily = (val) => {
  const subSchema = jsonSchemaVulnerability.vulnerabilityFamily;
  return validateClassProperties(val, subSchema);
};

/** validate vulnerability tracking id in Vulnerability
    * @param {string} val value intended to be populated into
    * vulnerabilityTrackingID class property
    * @returns {boolean}
  */
const isVulnerabilityTrackingId = (val) => {
  const subSchema = jsonSchemaVulnerability.vulnerabilityTrackingID;
  return validateClassProperties(val, subSchema);
};

/** validate vulnerability tracking URI in Vulnerability
    * @param {string} val value intended to be populated into
    * vulnerabilityTrackingURI class property
    * @returns {boolean}
  */
const isVulnerabilityTrackingURI = (val) => {
  const subSchema = jsonSchemaVulnerability.vulnerabilityTrackingURI;
  return validateClassProperties(val, subSchema);
};

/** validate vulnerability description in Vulnerability
    * @param {string} val value intended to be populated into
    * vulnerabilityDescription class property
    * @returns {boolean}
  */
const isVulnerabilityDescription = (val) => {
  const subSchema = jsonSchemaVulnerability.vulnerabilityDescription;
  return validateClassProperties(val, subSchema);
};

/** validate vulnerability description attachment in Vulnerability
    * @param {string} val value intended to be populated into
    * vulnerabilityDescriptionAttachment class property
    * @returns {boolean}
  */
const isVulnerabilityDescriptionAttachment = (val) => {
  const subSchema = jsonSchemaVulnerability.vulnerabilityDescriptionAttachment;
  return validateClassProperties(val, subSchema);
};

/** validate vulnerability CVE in Vulnerability
    * @param {string} val value intended to be populated into
    * vulnerabilityCVE class property
    * @returns {boolean}
  */
const isVulnerabilityCVE = (val) => {
  const subSchema = jsonSchemaVulnerability.vulnerabilityCVE;
  return validateClassProperties(val, subSchema);
};

/** validate cve score in Vulnerability
    * @param {number|null} val value intended to be populated into
    * cveScore class property
    * @returns {boolean}
  */
const isCVEScore = (val) => {
  const subSchema = jsonSchemaVulnerability.cveScore;
  return validateClassProperties(val, subSchema);
};

/** validate overall score in Vulnerability
    * @param {number|null} val value intended to be populated into
    * overallScore class property
    * @returns {boolean}
  */
const isOverallScore = (val) => {
  const subSchema = jsonSchemaVulnerability.overallScore;
  return validateClassProperties(val, subSchema);
};

/** validate overall level in Vulnerability
    * @param {string} val value intended to be populated into
    * overallLevel class property
    * @returns {boolean}
  */
const isOverallLevel = (val) => {
  const subSchema = jsonSchemaVulnerability.overallLevel;
  return validateClassProperties(val, subSchema);
};

module.exports = {
  isVulnerabilityId,
  isVulnerabilityName,
  isVulnerabilityFamily,
  isVulnerabilityTrackingId,
  isVulnerabilityTrackingURI,
  isVulnerabilityDescription,
  isVulnerabilityDescriptionAttachment,
  isVulnerabilityCVE,
  isCVEScore,
  isOverallScore,
  isOverallLevel,
};
