/*----------------------------------------------------------------------------
*
*     Copyright Â© 2022 THALES. All Rights Reserved.
 *
* -----------------------------------------------------------------------------
* THALES MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF
* THE SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
 * TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE, OR NON-INFRINGEMENT. THALES SHALL NOT BE
 * LIABLE FOR ANY DAMAGES SUFFERED BY LICENSEE AS A RESULT OF USING,
 * MODIFYING OR DISTRIBUTING THIS SOFTWARE OR ITS DERIVATIVES.
*
* THIS SOFTWARE IS NOT DESIGNED OR INTENDED FOR USE OR RESALE AS ON-LINE
* CONTROL EQUIPMENT IN HAZARDOUS ENVIRONMENTS REQUIRING FAIL-SAFE
* PERFORMANCE, SUCH AS IN THE OPERATION OF NUCLEAR FACILITIES, AIRCRAFT
* NAVIGATION OR COMMUNICATION SYSTEMS, AIR TRAFFIC CONTROL, DIRECT LIFE
* SUPPORT MACHINES, OR WEAPONS SYSTEMS, IN WHICH THE FAILURE OF THE
* SOFTWARE COULD LEAD DIRECTLY TO DEATH, PERSONAL INJURY, OR SEVERE
* PHYSICAL OR ENVIRONMENTAL DAMAGE ("HIGH RISK ACTIVITIES"). THALES
* SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTY OF FITNESS FOR
* HIGH RISK ACTIVITIES.
* -----------------------------------------------------------------------------
*/

const utilityGlobal = require('../../../utility-global');
const utility = require('../utility');

const alterVulnerability = (xmlData, vulnerabilities) => ((xmlDataCopy, vulnerabilitiesCopy) => {
  if (Array.isArray(vulnerabilitiesCopy)) {
    const vulnerabilityCounter = utilityGlobal().counter();

    vulnerabilitiesCopy.forEach((vulnerability) => {
      vulnerabilityCounter.increment();

      const v = vulnerability;
      const {
        projectName,
        projectVersion,
        vulnerabilityCVE,
        supportingAssetRef,
        vulnerabilityCVSS,
      } = v;

      v.projectNameRef = projectName;
      v.projectVersionRef = projectVersion;
      v.vulnerabilityDescription = utility().getHTMLString(xmlDataCopy, 'vulnerabilityDescription', vulnerabilityCounter.getCount());
      supportingAssetRef.shift();
      v.cveScore = v.vulnerabilityCVEScoring[0].cveScore;

      // alter vulnerability CVSSV2
      if (vulnerabilityCVE[0] === '') {
        const {
          vulnerabilityBaseScoreMetrics,
          vulnerabilityTemporalScoreMetrics,
          ...rest
        } = vulnerabilityCVSS[0];

        vulnerabilityCVE[0] = utility().getVectorCVSSV2({
          ...vulnerabilityBaseScoreMetrics[0].vulnerabilityExploitabilityMetrics[0],
          ...vulnerabilityBaseScoreMetrics[0].vulnerabilityImpactMetrics[0],
          ...vulnerabilityTemporalScoreMetrics[0],
        });

        const obj = {
          vulnerabilityCVE,
          ...rest,
        };
        v.cveScore = rest.temporalScore;
        Object.assign(v, obj);
      } else vulnerabilityCVE[0] = '';
      // remove vulnerabilityCVE link CVSSV3
    });
  }
  return vulnerabilitiesCopy;
})(xmlData, vulnerabilities);

module.exports = alterVulnerability;
