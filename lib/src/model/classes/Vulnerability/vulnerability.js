/*----------------------------------------------------------------------------
*
*     Copyright Â© YYYY THALES. All Rights Reserved.
 *
* -----------------------------------------------------------------------------
* THALES MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF
* THE SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
 * TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE, OR NON-INFRINGEMENT. THALES SHALL NOT BE
 * LIABLE FOR ANY DAMAGES SUFFERED BY LICENSEE AS A RESULT OF USING,
 * MODIFYING OR DISTRIBUTING THIS SOFTWARE OR ITS DERIVATIVES.
*
* THIS SOFTWARE IS NOT DESIGNED OR INTENDED FOR USE OR RESALE AS ON-LINE
* CONTROL EQUIPMENT IN HAZARDOUS ENVIRONMENTS REQUIRING FAIL-SAFE
* PERFORMANCE, SUCH AS IN THE OPERATION OF NUCLEAR FACILITIES, AIRCRAFT
* NAVIGATION OR COMMUNICATION SYSTEMS, AIR TRAFFIC CONTROL, DIRECT LIFE
* SUPPORT MACHINES, OR WEAPONS SYSTEMS, IN WHICH THE FAILURE OF THE
* SOFTWARE COULD LEAD DIRECTLY TO DEATH, PERSONAL INJURY, OR SEVERE
* PHYSICAL OR ENVIRONMENTAL DAMAGE ("HIGH RISK ACTIVITIES"). THALES
* SPECIFICALLY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTY OF FITNESS FOR
* HIGH RISK ACTIVITIES.
* -----------------------------------------------------------------------------
*/

// contains information about each vulnerability
module.exports = class Vulnerability {
  // value of latest vulnerabilityId
  static #idCount;

  // referenced value of projectName from ISRAMetaProject
  #projectNameRef;

  // referenced value of projectVersion from ISRAMetaProject
  #projectVersionRef;

  // value of id of vulnerability
  #vulnerabilityId;

  // text input of name of vulnerability
  #vulnerabilityName;

  // value of vulnerability family selected
  #vulnerabilityFamily;

  // text input of GTO defect id
  #vulnerabilityTrackingID;

  // inserted value of hyperlink of GTO defect url
  #vulnerabilityTrackingURI;

  // text input of description of vulnerability
  #vulnerabilityDescription;

  // value of attachment of a vulnerability descriptive document file
  #vulnerabilityDescriptionAttachment;

  // vector string for CVSSV2/CVSSV3
  #vulnerabilityCVE;

  // text input of calculated cvssv2/v3 score
  #cveScore;

  // calculated value of vulnerability scoring
  #overallScore;

  // calculated value of vulnerability level
  #overallLevel;

  // id references of selected supportingAsset
  #supportingAssetRef = new Set();

  constructor() {
    this.#vulnerabilityId = Vulnerability.incrementId();
  }

  set vulnerabilityId(vulnerabilityId) {
    if (Number.isSafeInteger(vulnerabilityId) || vulnerabilityId === null) {
      this.#vulnerabilityId = vulnerabilityId;
    } else throw new Error(`Vulnerability asset id ${vulnerabilityId} does not match current vulnerabilityId`);
  }

  set projectNameRef(projectname) {
    if (typeof projectname === 'string') this.#projectNameRef = projectname;
    else throw new Error('Project name is not a string');
  }

  set projectVersionRef(projectVersion) {
    if (typeof projectVersion === 'string') this.#projectVersionRef = projectVersion;
    else throw new Error('Project version is not a string');
  }

  set vulnerabilityName(vulnerabilityName) {
    if (typeof vulnerabilityName === 'string') this.#vulnerabilityName = vulnerabilityName;
    else throw new Error(`Vulnerability ${this.#vulnerabilityId}: name is not a string`);
  }

  set vulnerabilityFamily(vulnerabilityFamily) {
    if (typeof vulnerabilityFamily === 'string') this.#vulnerabilityFamily = vulnerabilityFamily;
    else throw new Error(`Vulnerability ${this.#vulnerabilityId}: family is not a string`);
  }

  set vulnerabilityTrackingID(vulnerabilityTrackingID) {
    if (typeof vulnerabilityTrackingID === 'string') this.#vulnerabilityTrackingID = vulnerabilityTrackingID;
    else throw new Error(`Vulnerability ${this.#vulnerabilityId}: tracking id is not a string`);
  }

  set vulnerabilityTrackingURI(vulnerabilityTrackingURI) {
    if (typeof vulnerabilityTrackingURI === 'string' && Vulnerability.#isValidURI(vulnerabilityTrackingURI)) {
      this.#vulnerabilityTrackingURI = vulnerabilityTrackingURI;
    } else {
      throw new Error(`Vulnerability ${this.#vulnerabilityId}: tracking URL is invalid or not a string`);
    }
  }

  set vulnerabilityDescription(vulnerabilityDescription) {
    if (typeof vulnerabilityDescription === 'string') this.#vulnerabilityDescription = vulnerabilityDescription;
    else throw new Error(`Vulnerability ${this.#vulnerabilityId}: description is not a string`);
  }

  set vulnerabilityDescriptionAttachment(vulnerabilityDescriptionAttachment) {
    if (typeof vulnerabilityDescriptionAttachment === 'string' && Vulnerability.#isValidAttachment(vulnerabilityDescriptionAttachment)) {
      this.#vulnerabilityDescriptionAttachment = vulnerabilityDescriptionAttachment;
    } else {
      throw new Error(`Vulnerability ${this.#vulnerabilityId}: description attachment is not a string`);
    }
  }

  set vulnerabilityCVE(vulnerabilityCVE) {
    if (typeof vulnerabilityCVE === 'string') this.#vulnerabilityCVE = vulnerabilityCVE;
    else throw new Error(`Vulnerability ${this.#vulnerabilityId}: vulnerability cve is not a string`);
  }

  set cveScore(cveScore) {
    if (!Number.isNaN(cveScore) || cveScore === null) this.#cveScore = cveScore;
    else throw new Error(`Vulnerability ${this.#vulnerabilityId}: cve score is not a double`);
  }

  set overallScore(overallScore) {
    if (Number.isSafeInteger(overallScore) || overallScore === null) {
      this.#overallScore = overallScore;
    } else throw new Error(`Vulnerability ${this.#vulnerabilityId}: overall score is not a string`);
  }

  set overallLevel(overallLevel) {
    if (typeof overallLevel === 'string') this.#overallLevel = overallLevel;
    else throw new Error(`Vulnerability ${this.#vulnerabilityId}: overall level is not a string`);
  }

  addSupportingAssetRef(supportingAssetId) {
    if (Number.isSafeInteger(supportingAssetId) || supportingAssetId === null) {
      this.#supportingAssetRef.add(supportingAssetId);
    } else throw new Error(`Vulnerability ${this.#vulnerabilityId}: supporting asset ref is not a string`);
  }

  deleteSupportingAssetRef(supportingAssetId) {
    if (Number.isSafeInteger(supportingAssetId) && this.#supportingAssetRef.size > 0) {
      this.#supportingAssetRef.delete(supportingAssetId);
    } else throw new Error(`Vulnerability ${this.#vulnerabilityId}: supporting asset ref is not a string`);
  }

  // auto-increments static idCount to update vulnerabilityId
  static incrementId() {
    if (!this.#idCount) this.#idCount = 1;
    else this.#idCount += 1;
    return this.#idCount;
  }

  // set latest id
  static setIdCount(latestId) {
    this.#idCount = latestId;
  }

  // validates if vulnerabilityTrackingURI inserted is valid
  static #isValidURI(vulnerabilityTrackingURI) {
    // pattern reference from ajv-formats
    const pattern = new RegExp(
      '^(?:https?|ftp):\\/\\/' // protocol (http:// or https:// or ftp:)
    + '(?:\\S+(?::\\S*)?@)?(?:'
    + '(?!(?:10|127)(?:\\.\\d{1,3}){3})'
    + '(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})'
    + '(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])'
    + '(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}'
    + '(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z0-9\u{00a1}-\u{ffff}]+-)*[a-z0-9\u{00a1}-\u{ffff}]+)(?:\\.(?:[a-z0-9\u{00a1}-\u{ffff}]+-)*[a-z0-9\u{00a1}-\u{ffff}]+)*(?:\\.(?:[a-z\u{00a1}-\u{ffff}]{2,})))(?::\\d{2,5})?(?:\\/[^\\s]*)?$',
      'iu',
    );
    return pattern.test(vulnerabilityTrackingURI) || vulnerabilityTrackingURI === '';
  }

  // validates if vulnerabilityDescriptionAttachment file is a base64 string
  // pattern reference from fast-xml-parser
  static #isValidAttachment(vulnerabilityDescriptionAttachment) {
    const pattern = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;
    return pattern.test(vulnerabilityDescriptionAttachment)
    || vulnerabilityDescriptionAttachment === null;
  }

  // get obj of relevant properties for storage
  get properties() {
    return {
      projectNameRef: this.#projectNameRef,
      projectVersionRef: this.#projectVersionRef,
      vulnerabilityId: this.#vulnerabilityId,
      vulnerabilityName: this.#vulnerabilityName,
      vulnerabilityFamily: this.#vulnerabilityFamily,
      vulnerabilityTrackingID: this.#vulnerabilityTrackingID,
      vulnerabilityTrackingURI: this.#vulnerabilityTrackingURI,
      vulnerabilityDescription: this.#vulnerabilityDescription,
      vulnerabilityDescriptionAttachment: this.#vulnerabilityDescriptionAttachment,
      vulnerabilityCVE: this.#vulnerabilityCVE,
      cveScore: this.#cveScore,
      overallScore: this.#overallScore,
      overallLevel: this.#overallLevel,
      supportingAssetRef: this.#supportingAssetRef,
    };
  }
};
